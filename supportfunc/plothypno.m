function Ax = plothypno(Fig, XLim, ARO, HYP, srate)
Ax = uiaxes(Fig, ...
    'Box', 'on', ...
    'NextPlot', 'add', ...
    'Color', [233, 236, 239]./255, ...
    'XLim', XLim, ...
    'XTick', ceil(XLim(1)*24)/24:1/24:floor(XLim(2)*24)/24, ...
    'YLim', [-4.5, 2.5], ...
    'YTickLabel', {'N3', 'N2', 'N1', 'R', 'W', 'ARO'}, ...
    'YTick', -3:2, ...
    'XColor', [0.5, 0.5, 0.5], ...
    'YColor', [0.5, 0.5, 0.5], ...
    'XGrid', 'on', ...
    'YGrid', 'off', ...
    'XAxisLocation', 'top', ...
    'GridAlpha', 0.25, ...
    'LineWidth', 0.5, ...
    'TickLength', [0, 0], ...
    'FontSize', 8, ...
    'Layer', 'bottom', ...
    'Units', 'normalized');
Ax.Title.FontSize = 8;
Ax.Title.FontWeight = 'normal';
Ax.XTickLabel = datestr(Ax.XTick, 'HH:MM'); %#ok<DATST>
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% State shifts
XData = [asrow(ARO.latency(ARO.stateshift)); asrow(ARO.latency(ARO.stateshift)); nan(1, sum(ARO.stateshift))];
XData = XData/(24*60*60*srate)+HYP.datnm(1);
XData = XData(:);
YData = 2.*ones(1, length(XData)) + repmat([-5.5, 0.25, nan], 1, sum(ARO.stateshift));
plot(Ax, XData, YData, '-', 'Color', standard_colors('orange').^0.25, 'LineWidth', 0.5);
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% Arousals
XData = [asrow(ARO.latency); asrow(ARO.latency); nan(1, size(ARO, 1))];
XData = XData/(24*60*60*srate)+HYP.datnm(1);
XData = XData(:);
YData = 2.*ones(1, length(XData)) + repmat([-0.25, 0.25, nan], 1, size(ARO, 1));
plot(Ax, XData, YData, '-', 'Color', standard_colors('orange').^0.5, 'LineWidth', 0.5);
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
stairs(Ax, HYP.datnm, HYP.sleepstage, '-', ...
    'LineWidth', 0.5, ...
    'Color', [0.7, 0.7118, 0.7236]);
for stage = -3:1
    tmp = nan(size(HYP.sleepstage));
    tmp(HYP.sleepstage == stage) = stage;
    if stage == -3; clr = standard_colors('blue').^2; end
    if stage == -2; clr = standard_colors('blue'); end
    if stage == -1; clr = standard_colors('blue').^0.5; end
    if stage == 0; clr = standard_colors('purple'); end
    if stage == 1; clr = standard_colors('red'); end
    stairs(Ax, HYP.datnm, tmp, '-', ...
        'Color', clr, ...
        'LineWidth', 6);
end
% Sleep cycles
currcycle = HYP.sleepcycle(find(~isnan(HYP.sleepcycle), 1, 'first'));
currepisode = HYP.sleepepisode(find(~isnan(HYP.sleepepisode), 1, 'first'));
tmp = find(HYP.sleepcycle == currcycle & HYP.sleepepisode == currepisode, 1, 'first');
CData = [...
    standard_colors('blue').^0.5; ...
    standard_colors('blue').^2; ...
    standard_colors('blue').^2; ...
    standard_colors('blue').^0.5; ...
    ];
while tmp <= size(HYP, 1)
    % Find index
    idx = [tmp, find(HYP.sleepcycle == currcycle & HYP.sleepepisode == currepisode, 1, 'last')];
    if length(idx) == 1
        tmp = inf; %#ok<NASGU>
        break
    end
    % Plot
    Vertices = [[HYP.datnm(idx(1)); HYP.datnm(idx(2)); HYP.datnm(idx(2)); HYP.datnm(idx(1))], [-4.25; -4.25; -3.75; -3.75]];
    Faces = 1:4;
    patch(Ax, 'Faces', Faces, 'Vertices', Vertices, 'FaceVertexCData', CData, ...
        'EdgeColor', 'none', ...
        'FaceColor', 'interp');
    % Next iteration
    tmp = idx(2)+1;
    if tmp > size(HYP, 1)
        tmp = inf; %#ok<NASGU>
        break
    end
    currcycle = HYP.sleepcycle(tmp);
    currepisode = HYP.sleepepisode(tmp);
    while tmp < size(HYP, 1) && (isnan(currcycle) || isnan(currepisode))
        tmp = tmp+1;
        currcycle = HYP.sleepcycle(tmp);
        currepisode = HYP.sleepepisode(tmp);
    end
    if tmp > size(HYP, 1)
        tmp = inf; %#ok<NASGU>
        break
    end
    if currepisode == -1
        CData = [...
            standard_colors('blue').^0.5; ...
            standard_colors('blue').^2; ...
            standard_colors('blue').^2; ...
            standard_colors('blue').^0.5; ...
            ];
    elseif currepisode == -2
        CData = [...
            standard_colors('blue').^3; ...
            standard_colors('blue').^3; ...
            standard_colors('blue').^3; ...
            standard_colors('blue').^3; ...
            ];
    elseif currepisode == 1
        CData = [...
            standard_colors('blue').^2; ...
            standard_colors('blue').^0.5; ...
            standard_colors('blue').^0.5; ...
            standard_colors('blue').^2; ...
            ];
    elseif currepisode == 2
        CData = [ ...
            standard_colors('purple'); ...
            standard_colors('purple'); ...
            standard_colors('purple'); ...
            standard_colors('purple'); ...
            ];
    end
end





end